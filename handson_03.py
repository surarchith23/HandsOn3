# -*- coding: utf-8 -*-
"""HandsOn_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FmyUiql88sCVafNyq-_ROIyXaEpVatmV
"""

import time
import matplotlib.pyplot as plt
import numpy as np

def f(n):
    x=1
    for i in range(n):
      for j in range(n):
        x=x+1
    return x

n_val=np.array([1, 2, 3, 5, 10, 20, 50, 100, 200, 500])
times = []

for n in n_val:
  start=time.time()
  f(n)
  end=time.time()
  total=end-start
  times.append(total)

times=[t*1000 for t in times]


plt.figure(figsize=(10, 6))
plt.plot(n_val, times, 'o', label='Measured Time')
plt.xlabel('n')
plt.ylabel('Time (ms)')
plt.title('Runtime of function f(n) vs n')


coeffs=np.polyfit(n_val,times,2)
poly=np.poly1d(coeffs)
n_fit=np.linspace(min(n_val),max(n_val), 50)
time_fit = poly(n_fit)
plt.plot(n_fit, time_fit, '-', label='Polynomial Fit')

plt.legend()
plt.grid(True)
plt.show()

import time
import matplotlib.pyplot as plt
import numpy as np

def f(n):
  x = 1
  for i in range(n):
    for j in range(n):
      x=x+1
  return x

n_val=np.array([1, 2, 3, 5, 10, 20, 50, 100, 200, 500])
times=[]
for n in n_val:
  start = time.time()
  f(n)
  end=time.time()
  total=end-start
  times.append(total)

times = [t * 1000 for t in times]

coeffs = np.polyfit(n_val, times, 2)
poly = np.poly1d(coeffs)
n_fit = np.linspace(min(n_val), max(n_val), 50)
time_fit = poly(n_fit)


plt.figure(figsize=(10, 6))
plt.plot(n_val, times, 'o', label='Measured Time')
plt.plot(n_fit, time_fit, '-', label='Polynomial Fit')


plt.plot(n_fit, 0.01 * n_fit**2, '--', label='n^2 Lower Bound', color='green')
plt.plot(n_fit, 10 * n_fit**2, '--', label='n^2 Upper Bound', color='red')
plt.xlabel('n')
plt.ylabel('Time (ms)')
plt.title('Runtime of function f(n) vs n')
plt.legend()
plt.grid(True)
plt.show()

print("Fitted Polynomial Coefficients:", coeffs)

import time
import matplotlib.pyplot as plt
import numpy as np

def f(n):
  x = 1
  for i in range(n):
    for j in range(n):
      x=x+1
  return x

n_val = np.array([1, 2, 3, 5, 10, 20, 50, 100, 200, 500])
times = []
for n in n_val:
  start = time.time()
  f(n)
  end = time.time()
  total = end - start
  times.append(total)

times = [t * 1000 for t in times]

coeffs = np.polyfit(n_val, times, 2)
poly = np.poly1d(coeffs)
n_fit = np.linspace(min(n_val), max(n_val), 50)
time_fit = poly(n_fit)

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(n_val, times, 'o', label='Measured Time')
plt.plot(n_fit, time_fit, '-', label='Polynomial Fit')

plt.plot(n_fit, 0.01 * n_fit**2, '--', label='n^2 Lower Bound', color='green')
plt.plot(n_fit, 10 * n_fit**2, '--', label='n^2 Upper Bound', color='red')

plt.xlabel('n')
plt.ylabel('Time (ms)')
plt.title('Runtime of function f(n) vs n')
plt.legend()
plt.grid(True)

plt.subplot(1, 2, 2)
zoom_range = (10, 100)
plt.plot(n_val, times, 'o', label='Measured Time')
plt.plot(n_fit, time_fit, '-', label='Polynomial Fit')

plt.plot(n_fit, 0.01 * n_fit**2, '--', label='n^2 Lower Bound', color='green')
plt.plot(n_fit, 10 * n_fit**2, '--', label='n^2 Upper Bound', color='red')


plt.xlim(zoom_range)
plt.ylim(0, max(times) * 1.1)
plt.xlabel('n')
plt.ylabel('Time (ms)')
plt.title('Zoomed-in View of Runtime vs n')
plt.legend()
plt.grid(True)

n_0 = 50
plt.axvline(x=n_0, color='magenta', linestyle='--', label=f'Approximate n_0 = {n_0}')
plt.legend()

plt.show()
print("Fitted Polynomial Coefficients:", coeffs)

def merge(arr):
  if len(arr)>1:
    mid=len(arr)//2
    left=arr[:mid]
    right=arr[mid:]

    merge(left)
    merge(right)
    i=j=k=0
    while i<len(left) and j<len(right):
      if left[i]<right[j]:
        arr[k]=left[i]
        i=i+1
      else:
        arr[k]=right[j]
        j=j+1
      k=k+1

    while i<len(left):
      arr[k]=left[i]
      i=i+1
      k=k+1

    while j<len(right):
      arr[k]=right[j]
      j=j+1
      k=k+1
array=[5,2,4,7,1,3,2,6]
merge(array)
print(array)